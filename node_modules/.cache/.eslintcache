[{"/Users/paawankarwa/Desktop/projects/realtime-editor/src/index.js":"1","/Users/paawankarwa/Desktop/projects/realtime-editor/src/reportWebVitals.js":"2","/Users/paawankarwa/Desktop/projects/realtime-editor/src/App.js":"3","/Users/paawankarwa/Desktop/projects/realtime-editor/src/pages/Home.js":"4","/Users/paawankarwa/Desktop/projects/realtime-editor/src/pages/EditorPage.js":"5","/Users/paawankarwa/Desktop/projects/realtime-editor/src/components/Client.js":"6","/Users/paawankarwa/Desktop/projects/realtime-editor/src/components/Editor.js":"7","/Users/paawankarwa/Desktop/projects/realtime-editor/src/socket.js":"8","/Users/paawankarwa/Desktop/projects/realtime-editor/src/Actions.js":"9"},{"size":535,"mtime":1695130802841,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1695130802841,"results":"12","hashOfConfig":"11"},{"size":687,"mtime":1695223885146,"results":"13","hashOfConfig":"11"},{"size":1974,"mtime":1695228630913,"results":"14","hashOfConfig":"11"},{"size":4697,"mtime":1695406398756,"results":"15","hashOfConfig":"11"},{"size":279,"mtime":1695208931764,"results":"16","hashOfConfig":"11"},{"size":1970,"mtime":1695406943188,"results":"17","hashOfConfig":"11"},{"size":306,"mtime":1695371433910,"results":"18","hashOfConfig":"11"},{"size":199,"mtime":1695302663676,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"4jf5yo",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/paawankarwa/Desktop/projects/realtime-editor/src/index.js",[],[],[],"/Users/paawankarwa/Desktop/projects/realtime-editor/src/reportWebVitals.js",[],[],"/Users/paawankarwa/Desktop/projects/realtime-editor/src/App.js",[],[],"/Users/paawankarwa/Desktop/projects/realtime-editor/src/pages/Home.js",["51","52"],[],"import React, { useState } from 'react'\nimport {v4 as uuidV4} from 'uuid'\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\n\nconst Home = () => {\n    const navigate = useNavigate();\n    const [roomId,setRoomId] = useState('');\n    const [username,setUsername] = useState('');\n    \n    const createNewRoom = (e) =>{\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success(\"created a new room\")\n        \n    }\n    const joinRoom = (e) =>{\n        if(!roomId || !username){\n            toast.error(\"room id or username not filled\");\n            return;\n        }\n\n        //Redirect \n        navigate(`/editor/${roomId}`,{\n            state:{\n                username\n            }\n        });\n        console.log(`Hello ${username}`);\n    }\n    const handleInputEnter = (event) => {\n        if(event.code == \"Enter\"){\n            joinRoom();\n        }\n    }\n  return (\n    <div className='homePageWrapper'>\n        <div className='formWrapper'>\n            <img src='/code-sync.png' alt='code-sync-logo'/>\n            <h4 className='mainLabel'>paste invitation</h4>\n            <div className='inputGroup'>\n                <input type='text' onChange={(e)=>setRoomId(e.target.value)} placeholder='room id' className='inputBox' value={roomId} onKeyUp={handleInputEnter}></input>\n                <input type='text' onChange={(e)=>setUsername(e.target.value)} placeholder='username' className='inputBox' value={username} onKeyUp={handleInputEnter}></input>\n                <button className='btn joinBtn' onClick={joinRoom}>join</button>\n                <span className='craeteInfo'>if nobody invited you then you can create &nbsp;\n                    <a href='' onClick={createNewRoom} className='createNewBtn'>room</a>\n                </span>\n            </div>\n        </div>\n        <footer>\n            <h4>build by paawan</h4>\n        </footer>\n        \n    </div>\n  )\n}\n\nexport default Home","/Users/paawankarwa/Desktop/projects/realtime-editor/src/pages/EditorPage.js",["53"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\nvar roomIDTemp = null;\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const codeRef = useRef(null);\n    const location = useLocation();\n    const { roomId } = useParams();\n    roomIDTemp = roomId;\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n    var called = 0;\n    useEffect(() => {\n        if(called>=1){\n            return;\n        }\n        called += 1;\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n            \n            // Listening for joined event\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            // Listening for disconnected\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            if(socketRef.current != null){\n                socketRef.current.off(ACTIONS.JOINED);\n                socketRef.current.off(ACTIONS.DISCONNECTED);\n                socketRef.current.disconnect();\n            \n            }\n            \n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            console.log(roomIDTemp);\n            await navigator.clipboard.writeText(roomIDTemp);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                        <img\n                            className=\"logoImage\"\n                            src=\"/code-sync.png\"\n                            alt=\"logo\"\n                        />\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"editorWrap\">\n                <Editor\n                    socketRef={socketRef}\n                    roomId={roomId}\n                    onCodeChange={(code) => {\n                        codeRef.current = code;\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;","/Users/paawankarwa/Desktop/projects/realtime-editor/src/components/Client.js",[],[],"/Users/paawankarwa/Desktop/projects/realtime-editor/src/components/Editor.js",["54","55","56"],[],"import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n    var called = 0;\n    useEffect(() => {\n        if(called>=1){\n            return;\n        }\n        called+=1;\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: 'javascript', json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            if(socketRef.current!=null){\n                socketRef.current.off(ACTIONS.CODE_CHANGE);\n            }\n            \n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;","/Users/paawankarwa/Desktop/projects/realtime-editor/src/socket.js",[],[],"/Users/paawankarwa/Desktop/projects/realtime-editor/src/Actions.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":34,"column":23,"nodeType":"59","messageId":"60","endLine":34,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":48,"column":21,"nodeType":"63","endLine":48,"endColumn":81},{"ruleId":"64","severity":1,"message":"65","line":28,"column":19,"nodeType":"66","endLine":28,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":17,"column":17,"nodeType":"66","endLine":17,"endColumn":18},{"ruleId":"64","severity":1,"message":"67","line":56,"column":27,"nodeType":"68","endLine":56,"endColumn":34},{"ruleId":"64","severity":1,"message":"69","line":60,"column":8,"nodeType":"70","endLine":60,"endColumn":27,"suggestions":"71"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","Assignments to the 'called' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["72"],{"desc":"73","fix":"74"},"Update the dependencies array to be: [socketRef]",{"range":"75","text":"76"},[1867,1886],"[socketRef]"]